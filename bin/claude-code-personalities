#!/bin/bash

# Claude Code Personalities Manager
# Self-contained command for managing Claude Code Personalities

set -e

VERSION="1.1.1"
GITHUB_REPO="Mehdi-Hp/claude-code-personalities"
CLAUDE_DIR="$HOME/.claude"
HOOKS_DIR="$CLAUDE_DIR/hooks"
VERSION_FILE="$CLAUDE_DIR/.personalities_version"
INSTALL_DIR="$CLAUDE_DIR/personalities"
BIN_PATH="$HOME/.local/bin/claude-code-personalities"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

# Helper functions
print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_info() {
    echo -e "${CYAN}ℹ${NC} $1"
}

show_version() {
    if [[ -f "$VERSION_FILE" ]]; then
        local installed_version=$(cat "$VERSION_FILE")
        echo "Claude Code Personalities v$installed_version"
    else
        echo "Claude Code Personalities v$VERSION (not installed)"
    fi
}

show_help() {
    show_version
    echo ""
    echo "Usage: claude-code-personalities [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  install         Install Claude Code Personalities"
    echo "  update          Update to the latest version"
    echo "  uninstall       Remove Claude Code Personalities" 
    echo "  status          Check installation status"
    echo "  check-update    Check for available updates"
    echo "  version         Show version information"
    echo "  help            Show this help message"
    echo ""
    echo "Installation:"
    echo "  curl -fsSL https://raw.githubusercontent.com/$GITHUB_REPO/main/install.sh | bash"
    echo ""
    echo "Quick update:"
    echo "  claude-code-personalities update"
}

check_dependencies() {
    local missing=()
    
    if ! command -v jq &> /dev/null; then
        missing+=("jq")
    fi
    
    if ! command -v curl &> /dev/null; then
        missing+=("curl")
    fi
    
    if ! command -v git &> /dev/null; then
        missing+=("git")
    fi
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        print_error "Missing required dependencies: ${missing[*]}"
        echo ""
        echo "Install with:"
        for dep in "${missing[@]}"; do
            echo "  brew install $dep"
        done
        exit 1
    fi
}

backup_file() {
    local file="$1"
    if [[ -f "$file" ]]; then
        local timestamp=$(date +%Y%m%d_%H%M%S)
        cp "$file" "${file}.backup.${timestamp}"
        print_info "Backed up $(basename "$file")"
    fi
}

download_latest() {
    local temp_dir=$(mktemp -d)
    print_info "Downloading latest version from GitHub..." >&2
    
    # Get latest release info
    local release_info=$(curl -sL "https://api.github.com/repos/$GITHUB_REPO/releases/latest")
    local latest_version=$(echo "$release_info" | jq -r '.tag_name' | sed 's/^v//')
    local tarball_url=$(echo "$release_info" | jq -r '.tarball_url')
    
    if [[ -z "$latest_version" ]] || [[ "$latest_version" == "null" ]]; then
        print_error "Failed to get latest version from GitHub" >&2
        rm -rf "$temp_dir"
        exit 1
    fi
    
    print_info "Latest version: v$latest_version" >&2
    
    # Download and extract
    curl -sL "$tarball_url" | tar xz -C "$temp_dir" --strip-components=1
    
    echo "$temp_dir"
    echo "$latest_version"
}

install_files() {
    local source_dir="$1"
    local version="$2"
    
    print_info "Installing Claude Code Personalities v$version..."
    
    # Create directories
    mkdir -p "$CLAUDE_DIR"
    mkdir -p "$HOOKS_DIR"
    mkdir -p "$INSTALL_DIR"
    
    # Backup existing files
    [[ -f "$CLAUDE_DIR/statusline.sh" ]] && backup_file "$CLAUDE_DIR/statusline.sh"
    [[ -f "$CLAUDE_DIR/settings.json" ]] && backup_file "$CLAUDE_DIR/settings.json"
    
    # Copy statusline
    cp "$source_dir/scripts/statusline.sh" "$CLAUDE_DIR/statusline.sh"
    chmod +x "$CLAUDE_DIR/statusline.sh"
    print_success "Installed statusline.sh"
    
    # Copy hooks
    for hook in "$source_dir/hooks"/*.sh; do
        cp "$hook" "$HOOKS_DIR/"
        chmod +x "$HOOKS_DIR/$(basename "$hook")"
    done
    print_success "Installed hooks"
    
    # Store installation files for future updates
    cp -r "$source_dir/scripts" "$INSTALL_DIR/"
    cp -r "$source_dir/hooks" "$INSTALL_DIR/"
    
    # Write version file
    echo "$version" > "$VERSION_FILE"
    
    # Update or create settings.json
    update_settings
    
    print_success "Installation complete!"
}

update_settings() {
    local settings_file="$CLAUDE_DIR/settings.json"
    local temp_file=$(mktemp)
    
    if [[ ! -f "$settings_file" ]]; then
        # Create new settings file
        cat > "$settings_file" << 'EOF'
{
  "statusLine": {
    "type": "command",
    "command": "~/.claude/statusline.sh",
    "padding": 0
  },
  "hooks": {
    "PreToolUse": [{
      "matcher": "*",
      "hooks": [{
        "type": "command",
        "command": "~/.claude/hooks/personalities_track_activity.sh"
      }]
    }],
    "PostToolUse": [{
      "matcher": "*",
      "hooks": [{
        "type": "command",
        "command": "~/.claude/hooks/personalities_track_activity.sh"
      }]
    }],
    "UserPromptSubmit": [{
      "hooks": [{
        "type": "command",
        "command": "~/.claude/hooks/personalities_reset_errors.sh"
      }]
    }],
    "Stop": [{
      "matcher": "",
      "hooks": [{
        "type": "command",
        "command": "~/.claude/hooks/personalities_session_end.sh"
      }]
    }]
  }
}
EOF
        print_success "Created settings.json"
    else
        # Update existing settings using jq
        if command -v jq &> /dev/null; then
            jq '.statusLine = {
                "type": "command",
                "command": "~/.claude/statusline.sh",
                "padding": 0
            }' "$settings_file" > "$temp_file" && mv "$temp_file" "$settings_file"
            print_success "Updated settings.json"
        else
            print_warning "Could not update settings.json (jq not found)"
        fi
    fi
}

do_install() {
    echo -e "${BOLD}${BLUE}Installing Claude Code Personalities${NC}"
    echo ""
    
    check_dependencies
    
    # Download latest version
    local result=$(download_latest)
    local temp_dir=$(echo "$result" | head -1)
    local version=$(echo "$result" | tail -1)
    
    # Install files
    install_files "$temp_dir" "$version"
    
    # Cleanup
    rm -rf "$temp_dir"
    
    # Install this command to ~/.local/bin if not already there
    if [[ "$0" != "$BIN_PATH" ]]; then
        # Create directory if it doesn't exist
        mkdir -p "$(dirname "$BIN_PATH")"
        
        print_info "Installing command to $BIN_PATH..."
        cp "$0" "$BIN_PATH"
        chmod +x "$BIN_PATH"
        print_success "Command installed to $BIN_PATH"
        
        # Check if ~/.local/bin is in PATH
        if [[ ":$PATH:" != *":$(dirname "$BIN_PATH"):"* ]]; then
            print_warning "$(dirname "$BIN_PATH") is not in your PATH"
            echo "Add to your shell config: export PATH=\"\$HOME/.local/bin:\$PATH\""
        fi
    fi
    
    echo ""
    print_success "Claude Code Personalities v$version installed successfully!"
    print_info "Restart Claude Code to see the changes"
}

do_update() {
    echo -e "${BOLD}${BLUE}Updating Claude Code Personalities${NC}"
    echo ""
    
    check_dependencies
    
    # Check current version
    if [[ ! -f "$VERSION_FILE" ]]; then
        print_warning "Claude Code Personalities not installed. Running install instead..."
        do_install
        return
    fi
    
    local current_version=$(cat "$VERSION_FILE")
    print_info "Current version: v$current_version"
    
    # Download latest version
    local result=$(download_latest)
    local temp_dir=$(echo "$result" | head -1)
    local latest_version=$(echo "$result" | tail -1)
    
    # Compare versions
    if [[ "$current_version" == "$latest_version" ]]; then
        print_success "Already running the latest version!"
        rm -rf "$temp_dir"
        return
    fi
    
    # Show changelog
    print_info "Updating from v$current_version to v$latest_version"
    echo ""
    
    # Install new version
    install_files "$temp_dir" "$latest_version"
    
    # Update this command itself
    if [[ -f "$temp_dir/bin/claude-code-personalities" ]]; then
        print_info "Updating command..."
        # Ensure directory exists
        mkdir -p "$(dirname "$BIN_PATH")"
        cp "$temp_dir/bin/claude-code-personalities" "$BIN_PATH"
        chmod +x "$BIN_PATH"
        print_success "Command updated"
    fi
    
    # Cleanup
    rm -rf "$temp_dir"
    
    echo ""
    print_success "Updated to v$latest_version successfully!"
    print_info "Restart Claude Code to see the changes"
}

do_uninstall() {
    echo -e "${BOLD}${BLUE}Uninstalling Claude Code Personalities${NC}"
    echo ""
    
    # Remove statusline
    if [[ -f "$CLAUDE_DIR/statusline.sh" ]]; then
        rm "$CLAUDE_DIR/statusline.sh"
        print_success "Removed statusline.sh"
    fi
    
    # Remove hooks
    if [[ -d "$HOOKS_DIR" ]]; then
        rm -f "$HOOKS_DIR"/personalities_*.sh
        print_success "Removed hooks"
    fi
    
    # Remove version file
    [[ -f "$VERSION_FILE" ]] && rm "$VERSION_FILE"
    
    # Remove installation directory
    [[ -d "$INSTALL_DIR" ]] && rm -rf "$INSTALL_DIR"
    
    # Clean up settings.json
    if [[ -f "$CLAUDE_DIR/settings.json" ]] && command -v jq &> /dev/null; then
        print_info "Cleaning settings.json..."
        local temp_file=$(mktemp)
        jq 'del(.statusLine) | del(.hooks)' "$CLAUDE_DIR/settings.json" > "$temp_file"
        mv "$temp_file" "$CLAUDE_DIR/settings.json"
    fi
    
    print_success "Claude Code Personalities uninstalled"
    print_info "Restart Claude Code to complete removal"
}

check_for_updates() {
    echo -e "${BOLD}${BLUE}Checking for Updates${NC}"
    echo ""
    
    if [[ ! -f "$VERSION_FILE" ]]; then
        print_warning "Claude Code Personalities not installed"
        echo "Install with: claude-code-personalities install"
        exit 1
    fi
    
    local current_version=$(cat "$VERSION_FILE")
    print_info "Current version: v$current_version"
    
    # Get latest version from GitHub
    print_info "Checking GitHub for updates..."
    local release_info=$(curl -sL "https://api.github.com/repos/$GITHUB_REPO/releases/latest")
    local latest_version=$(echo "$release_info" | jq -r '.tag_name' | sed 's/^v//')
    
    if [[ -z "$latest_version" ]] || [[ "$latest_version" == "null" ]]; then
        print_error "Failed to check for updates"
        exit 1
    fi
    
    print_info "Latest version: v$latest_version"
    echo ""
    
    if [[ "$current_version" == "$latest_version" ]]; then
        print_success "You are running the latest version!"
    else
        print_warning "Update available!"
        echo ""
        echo "Update with:"
        echo "  claude-code-personalities update"
        echo ""
        echo "View release notes:"
        echo "  https://github.com/$GITHUB_REPO/releases/tag/v$latest_version"
    fi
}

show_status() {
    echo -e "${BOLD}${BLUE}Claude Code Personalities Status${NC}"
    echo ""
    
    # Check version
    if [[ -f "$VERSION_FILE" ]]; then
        local version=$(cat "$VERSION_FILE")
        print_success "Version: v$version"
    else
        print_error "Not installed"
        echo ""
        echo "Install with:"
        echo "  claude-code-personalities install"
        exit 1
    fi
    
    # Check statusline
    if [[ -f "$CLAUDE_DIR/statusline.sh" ]]; then
        print_success "Statusline installed"
    else
        print_error "Statusline not found"
    fi
    
    # Check hooks
    if [[ -d "$HOOKS_DIR" ]] && ls "$HOOKS_DIR"/personalities_*.sh &>/dev/null 2>&1; then
        print_success "Hooks installed:"
        for hook in "$HOOKS_DIR"/personalities_*.sh; do
            echo "    • $(basename "$hook")"
        done
    else
        print_error "Hooks not found"
    fi
    
    # Check settings
    if [[ -f "$CLAUDE_DIR/settings.json" ]]; then
        if grep -q "statusline.sh" "$CLAUDE_DIR/settings.json" 2>/dev/null; then
            print_success "Settings configured"
        else
            print_warning "Settings found but personalities not configured"
        fi
    else
        print_error "Settings.json not found"
    fi
    
    # Test statusline
    echo ""
    print_info "Testing statusline..."
    if [[ -f "$CLAUDE_DIR/statusline.sh" ]]; then
        echo -n "  Output: "
        echo '{"model":{"display_name":"Opus"},"workspace":{"current_dir":"/test"}}' | "$CLAUDE_DIR/statusline.sh"
        echo ""
    fi
}

# Main command handler
case "${1:-help}" in
    install)
        do_install
        ;;
    update|upgrade)
        do_update
        ;;
    uninstall|remove)
        do_uninstall
        ;;
    status)
        show_status
        ;;
    check-update|check)
        check_for_updates
        ;;
    version|-v|--version)
        show_version
        ;;
    help|-h|--help)
        show_help
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac