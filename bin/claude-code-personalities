#!/bin/bash

# Claude Code Personalities Manager
# Self-contained command for managing Claude Code Personalities

set -e

VERSION="0.0.5"
GITHUB_REPO="Mehdi-Hp/claude-code-personalities"
CLAUDE_DIR="$HOME/.claude"
HOOKS_DIR="$CLAUDE_DIR/hooks"
VERSION_FILE="$CLAUDE_DIR/.personalities_version"
INSTALL_DIR="$CLAUDE_DIR/personalities"
BIN_PATH="$HOME/.local/bin/claude-code-personalities"

# Nerd Font Icons
ICON_CHECK=$(printf '\xef\x80\x8c')         # check
ICON_ROCKET=$(printf '\xef\x84\xb5')        # rocket
ICON_STAR=$(printf '\xef\x80\x85')          # star
ICON_BULLET=$(printf '\xef\x80\xa2')        # circle
ICON_GEAR=$(printf '\xef\x80\x93')          # gear
ICON_TERMINAL=$(printf '\xef\x84\xa0')      # terminal
ICON_CODE=$(printf '\xef\x84\xa1')          # code
ICON_WARNING=$(printf '\xef\x81\xb1')       # warning
ICON_ERROR=$(printf '\xef\x81\x97')         # error
ICON_INFO=$(printf '\xef\x81\xa9')          # info

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
DIM='\033[2m'
NC='\033[0m'

# Helper functions
draw_box() {
    local color="${1:-${BLUE}}"
    local width="${2:-49}"
    shift 2
    local lines=("$@")
    
    # Top border
    echo -e "${BOLD}${color}╭$(printf '%.0s─' $(seq 1 $width))╮${NC}"
    
    # Content lines
    for line in "${lines[@]}"; do
        if [[ -z "$line" ]]; then
            # Empty line
            printf "${BOLD}${color}│${NC}"
            printf "%*s" $width ""
            echo -e "${BOLD}${color}│${NC}"
        else
            # Calculate visual width (approximate for common kaomojis)
            local visual_length=${#line}
            
            # Adjust for known wide characters
            if [[ "$line" =~ ＼\(＾▽＾\)／ ]]; then
                visual_length=11  # Empirical width
            elif [[ "$line" =~ ૮\ ․\ ․\ ྀིა ]]; then
                visual_length=7   # Empirical width
            fi
            
            local padding=$(( (width - visual_length) / 2 ))
            local right_padding=$(( width - visual_length - padding ))
            
            printf "${BOLD}${color}│${NC}"
            printf "%*s" $padding ""
            echo -ne "$line"
            printf "%*s" $right_padding ""
            echo -e "${BOLD}${color}│${NC}"
        fi
    done
    
    # Bottom border
    echo -e "${BOLD}${color}╰$(printf '%.0s─' $(seq 1 $width))╯${NC}"
}

print_success() {
    echo -e "${GREEN}${ICON_CHECK}${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}${ICON_WARNING}${NC} $1"
}

print_error() {
    echo -e "${RED}${ICON_ERROR}${NC} $1"
}

print_info() {
    echo -e "${CYAN}${ICON_INFO}${NC} $1"
}

print_step() {
    local step="$1"
    local total="$2"
    local message="$3"
    echo
    echo
    echo -e "${BOLD}${BLUE}Step $step/$total:${NC} $message"
    echo -e "${DIM}$(printf '%.0s─' $(seq 1 50))${NC}"
}

confirm_action() {
    local message="$1"
    local default="${2:-Y}"  # Default to Y if not specified
    
    echo
    echo -e "${CYAN}$message${NC}"
    
    if [[ "$default" == "Y" ]]; then
        echo -ne "  ${GREEN}[Y]es${NC} / ${DIM}[q]uit${NC}: "
    else
        echo -ne "  ${DIM}[Y]es${NC} / ${GREEN}[q]uit${NC}: "
    fi
    
    # Read from /dev/tty (terminal) to work when script is piped through bash
    # Fall back to stdin if /dev/tty is not available
    if [ -r /dev/tty ]; then
        read -n 1 -r response < /dev/tty
    else
        read -n 1 -r response
    fi
    echo # Add newline after single char input
    
    # Handle responses
    case "$response" in
        ""|"Y"|"y")
            if [[ "$default" == "Y" ]]; then
                return 0
            else
                echo -e "${YELLOW}Installation cancelled${NC}"
                return 1
            fi
            ;;
        "Q"|"q")
            echo -e "${YELLOW}Installation cancelled${NC}"
            return 1
            ;;
        *)
            echo -e "${RED}Invalid choice. Please press Y or q.${NC}"
            confirm_action "$message" "$default"
            ;;
    esac
}

show_version() {
    if [[ -f "$VERSION_FILE" ]]; then
        local installed_version=$(cat "$VERSION_FILE")
        echo "Claude Code Personalities v$installed_version"
    else
        echo "Claude Code Personalities v$VERSION (not installed)"
    fi
}

show_help() {
    show_version
    echo ""
    echo "Usage: claude-code-personalities [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  install             Install Claude Code Personalities"
    echo "  update              Update to the latest version"
    echo "  uninstall           Remove Claude Code Personalities" 
    echo "  status              Check installation status"
    echo "  check-update        Check for available updates"
    echo "  version             Show version information"
    echo "  help                Show this help message"
    echo ""
    echo "Installation:"
    echo "  curl -fsSL https://raw.githubusercontent.com/$GITHUB_REPO/main/install.sh | bash"
    echo "  claude-code-personalities install"
    echo ""
    echo "Quick Commands:"
    echo "  claude-code-personalities install          # Configure Claude Code"
    echo "  claude-code-personalities update           # Update to latest"
    echo "  claude-code-personalities status           # Check status"
}

check_dependencies() {
    local missing=()
    
    if ! command -v jq &> /dev/null; then
        missing+=("jq")
    fi
    
    if ! command -v curl &> /dev/null; then
        missing+=("curl")
    fi
    
    if ! command -v git &> /dev/null; then
        missing+=("git")
    fi
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        print_error "Missing required dependencies: ${missing[*]}"
        echo ""
        echo "Install with:"
        for dep in "${missing[@]}"; do
            echo "  brew install $dep"
        done
        exit 1
    fi
}

backup_file() {
    local file="$1"
    if [[ -f "$file" ]]; then
        local timestamp=$(date +%Y%m%d_%H%M%S)
        cp "$file" "${file}.backup.${timestamp}"
        print_info "Backed up $(basename "$file")"
    fi
}

download_latest() {
    local temp_dir=$(mktemp -d)
    print_info "Downloading latest version from GitHub..." >&2
    
    # Get latest release info
    local release_info=$(curl -sL "https://api.github.com/repos/$GITHUB_REPO/releases/latest")
    local latest_version=$(echo "$release_info" | jq -r '.tag_name' | sed 's/^v//')
    local tarball_url=$(echo "$release_info" | jq -r '.tarball_url')
    
    if [[ -z "$latest_version" ]] || [[ "$latest_version" == "null" ]]; then
        print_error "Failed to get latest version from GitHub" >&2
        rm -rf "$temp_dir"
        exit 1
    fi
    
    print_info "Latest version: v$latest_version" >&2
    
    # Download and extract
    curl -sL "$tarball_url" | tar xz -C "$temp_dir" --strip-components=1
    
    echo "$temp_dir"
    echo "$latest_version"
}

install_files() {
    local source_dir="$1"
    local version="$2"
    
    print_info "Installing Claude Code Personalities v$version..."
    
    # Create directories
    mkdir -p "$CLAUDE_DIR"
    mkdir -p "$HOOKS_DIR"
    mkdir -p "$INSTALL_DIR"
    
    # Backup existing files
    [[ -f "$CLAUDE_DIR/claude-code-personalities-statusline.sh" ]] && backup_file "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
    [[ -f "$CLAUDE_DIR/settings.json" ]] && backup_file "$CLAUDE_DIR/settings.json"
    
    # Copy statusline
    cp "$source_dir/scripts/claude-code-personalities-statusline.sh" "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
    chmod +x "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
    print_success "Installed claude-code-personalities-statusline.sh"
    
    # Copy hooks
    for hook in "$source_dir/hooks"/*.sh; do
        cp "$hook" "$HOOKS_DIR/"
        chmod +x "$HOOKS_DIR/$(basename "$hook")"
    done
    print_success "Installed hooks"
    
    # Store installation files for future updates
    cp -r "$source_dir/scripts" "$INSTALL_DIR/"
    cp -r "$source_dir/hooks" "$INSTALL_DIR/"
    
    # Write version file
    echo "$version" > "$VERSION_FILE"
    
    # Update or create settings.json
    update_settings
    
    print_success "Installation complete!"
}

update_settings() {
    local settings_file="$CLAUDE_DIR/settings.json"
    local temp_file=$(mktemp)
    
    if [[ ! -f "$settings_file" ]]; then
        # Create new settings file
        cat > "$settings_file" << 'EOF'
{
  "statusLine": {
    "type": "command",
    "command": "~/.claude/claude-code-personalities-statusline.sh",
    "padding": 0
  },
  "hooks": {
    "PreToolUse": [{
      "matcher": "*",
      "hooks": [{
        "type": "command",
        "command": "~/.claude/hooks/personalities_track_activity.sh"
      }]
    }],
    "PostToolUse": [{
      "matcher": "*",
      "hooks": [{
        "type": "command",
        "command": "~/.claude/hooks/personalities_track_activity.sh"
      }]
    }],
    "UserPromptSubmit": [{
      "hooks": [{
        "type": "command",
        "command": "~/.claude/hooks/personalities_reset_errors.sh"
      }]
    }],
    "Stop": [{
      "matcher": "",
      "hooks": [{
        "type": "command",
        "command": "~/.claude/hooks/personalities_session_end.sh"
      }]
    }]
  }
}
EOF
        print_success "Created settings.json"
    else
        # Update existing settings using jq
        if command -v jq &> /dev/null; then
            jq '.statusLine = {
                "type": "command",
                "command": "~/.claude/claude-code-personalities-statusline.sh",
                "padding": 0
            }' "$settings_file" > "$temp_file" && mv "$temp_file" "$settings_file"
            print_success "Updated settings.json"
        else
            print_warning "Could not update settings.json (jq not found)"
        fi
    fi
}

do_install() {
    # Check for any unknown arguments
    if [[ $# -gt 0 ]]; then
        print_error "Unknown argument: $1"
        echo "Usage: claude-code-personalities install"
        exit 1
    fi
    
    run_install
}

run_install() {
    # Clear terminal for clean installation experience
    clear
    
    # Display welcome banner
    draw_box "${BLUE}" 49 "" "૮ ․ ․ ྀིა" "" "Claude Code Personalities" ""
    echo
    echo -e "${ITALIC}This will enhance Claude Code with dynamic personalities that change"
    echo -e "based on what Claude is doing - from debugging to git management!${NC}"
    echo
    echo -e "${BOLD}What will be installed:${NC}"
    echo -e "  ${GREEN}${ICON_BULLET}${NC} Personality statusline script"
    echo -e "  ${GREEN}${ICON_BULLET}${NC} Activity tracking hooks"
    echo -e "  ${GREEN}${ICON_BULLET}${NC} Claude Code configuration"
    echo -e "  ${GREEN}${ICON_BULLET}${NC} Automatic backups of existing files"
    echo
    
    # Single confirmation prompt
    if ! confirm_action "Continue with installation?"; then
        exit 0
    fi
    
    # Step 1: Check dependencies and download
    print_step 1 4 "Checking dependencies and downloading latest version"
    check_dependencies
    
    local result=$(download_latest)
    local temp_dir=$(echo "$result" | head -1)
    local version=$(echo "$result" | tail -1)
    
    # Step 2: Prepare installation
    print_step 2 4 "Preparing installation"
    
    local files_to_backup=0
    [[ -f "$CLAUDE_DIR/claude-code-personalities-statusline.sh" ]] && ((files_to_backup++))
    [[ -f "$CLAUDE_DIR/settings.json" ]] && ((files_to_backup++))
    [[ -d "$HOOKS_DIR" ]] && [[ "$(ls -A $HOOKS_DIR 2>/dev/null)" ]] && ((files_to_backup++))
    
    if [[ $files_to_backup -gt 0 ]]; then
        echo -e "${YELLOW}Found existing configuration - creating backups${NC}"
    else
        echo -e "${GREEN}Clean installation - no existing files found${NC}"
    fi
    
    mkdir -p "$CLAUDE_DIR" "$HOOKS_DIR" "$INSTALL_DIR"
    [[ -f "$CLAUDE_DIR/claude-code-personalities-statusline.sh" ]] && backup_file "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
    [[ -f "$CLAUDE_DIR/settings.json" ]] && backup_file "$CLAUDE_DIR/settings.json"
    
    # Step 3: Install components
    print_step 3 4 "Installing personality components"
    
    cp "$temp_dir/scripts/claude-code-personalities-statusline.sh" "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
    chmod +x "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
    print_success "Personality statusline installed"
    
    for hook in "$temp_dir/hooks"/*.sh; do
        cp "$hook" "$HOOKS_DIR/"
        chmod +x "$HOOKS_DIR/$(basename "$hook")"
    done
    print_success "Activity tracking hooks installed"
    
    cp -r "$temp_dir/scripts" "$INSTALL_DIR/"
    cp -r "$temp_dir/hooks" "$INSTALL_DIR/"
    echo "$version" > "$VERSION_FILE"
    
    # Step 4: Configure Claude Code
    print_step 4 4 "Configuring Claude Code"
    
    if [[ -f "$CLAUDE_DIR/settings.json" ]]; then
        echo -e "${CYAN}Updating existing Claude Code configuration...${NC}"
        echo -e "${DIM}(Your original settings have been backed up)${NC}"
    else
        echo -e "${CYAN}Creating Claude Code configuration...${NC}"
    fi
    
    update_settings
    print_success "Claude Code configured for personalities"
    
    # Cleanup
    rm -rf "$temp_dir"
    
    # Success celebration
    echo
    draw_box "${GREEN}" 49 "" "＼(＾▽＾)／" "" "Success!" "Claude Code Personalities v$version" "Installed Successfully" ""
    echo
    echo -e "${BOLD}${ICON_ROCKET} What's Next:${NC}"
    echo -e "  ${CYAN}1.${NC} Restart Claude Code to activate personalities"
    echo -e "  ${CYAN}2.${NC} Start coding and watch Claude's mood change!"
    echo -e "  ${CYAN}3.${NC} Enjoy 30+ different personalities based on your activity"
    echo
    echo -e "${DIM}Run 'claude-code-personalities status' to check installation${NC}"
}


do_update() {
    echo -e "${BOLD}${BLUE}Updating Claude Code Personalities${NC}"
    echo ""
    
    check_dependencies
    
    # Check current version
    if [[ ! -f "$VERSION_FILE" ]]; then
        print_warning "Claude Code Personalities not installed. Running install instead..."
        do_install
        return
    fi
    
    local current_version=$(cat "$VERSION_FILE")
    print_info "Current version: v$current_version"
    
    # Download latest version
    local result=$(download_latest)
    local temp_dir=$(echo "$result" | head -1)
    local latest_version=$(echo "$result" | tail -1)
    
    # Compare versions
    if [[ "$current_version" == "$latest_version" ]]; then
        print_success "Already running the latest version!"
        rm -rf "$temp_dir"
        return
    fi
    
    # Show changelog
    print_info "Updating from v$current_version to v$latest_version"
    echo ""
    
    # Install new version
    install_files "$temp_dir" "$latest_version"
    
    # Update this command itself
    if [[ -f "$temp_dir/bin/claude-code-personalities" ]]; then
        print_info "Updating command..."
        # Ensure directory exists
        mkdir -p "$(dirname "$BIN_PATH")"
        cp "$temp_dir/bin/claude-code-personalities" "$BIN_PATH"
        chmod +x "$BIN_PATH"
        print_success "Command updated"
    fi
    
    # Cleanup
    rm -rf "$temp_dir"
    
    echo ""
    print_success "Updated to v$latest_version successfully!"
    print_info "Restart Claude Code to see the changes"
}

do_uninstall() {
    echo -e "${BOLD}${BLUE}Uninstalling Claude Code Personalities${NC}"
    echo ""
    
    # Remove statusline
    if [[ -f "$CLAUDE_DIR/claude-code-personalities-statusline.sh" ]]; then
        rm "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
        print_success "Removed claude-code-personalities-statusline.sh"
    fi
    
    # Remove hooks
    if [[ -d "$HOOKS_DIR" ]]; then
        rm -f "$HOOKS_DIR"/personalities_*.sh
        print_success "Removed hooks"
    fi
    
    # Remove version file
    [[ -f "$VERSION_FILE" ]] && rm "$VERSION_FILE"
    
    # Remove installation directory
    [[ -d "$INSTALL_DIR" ]] && rm -rf "$INSTALL_DIR"
    
    # Clean up settings.json
    if [[ -f "$CLAUDE_DIR/settings.json" ]] && command -v jq &> /dev/null; then
        print_info "Cleaning settings.json..."
        local temp_file=$(mktemp)
        jq 'del(.statusLine) | del(.hooks)' "$CLAUDE_DIR/settings.json" > "$temp_file"
        mv "$temp_file" "$CLAUDE_DIR/settings.json"
    fi
    
    print_success "Claude Code Personalities uninstalled"
    echo -e "  ${CYAN}${ICON_BULLET}${NC} Restart Claude Code to complete removal"
}

check_for_updates() {
    echo -e "${BOLD}${BLUE}Checking for Updates${NC}"
    echo ""
    
    if [[ ! -f "$VERSION_FILE" ]]; then
        print_warning "Claude Code Personalities not installed"
        echo "Install with: claude-code-personalities install"
        exit 1
    fi
    
    local current_version=$(cat "$VERSION_FILE")
    print_info "Current version: v$current_version"
    
    # Get latest version from GitHub
    print_info "Checking GitHub for updates..."
    local release_info=$(curl -sL "https://api.github.com/repos/$GITHUB_REPO/releases/latest")
    local latest_version=$(echo "$release_info" | jq -r '.tag_name' | sed 's/^v//')
    
    if [[ -z "$latest_version" ]] || [[ "$latest_version" == "null" ]]; then
        print_error "Failed to check for updates"
        exit 1
    fi
    
    print_info "Latest version: v$latest_version"
    echo ""
    
    if [[ "$current_version" == "$latest_version" ]]; then
        print_success "You are running the latest version!"
    else
        print_warning "Update available!"
        echo ""
        echo "Update with:"
        echo "  claude-code-personalities update"
        echo ""
        echo "View release notes:"
        echo "  https://github.com/$GITHUB_REPO/releases/tag/v$latest_version"
    fi
}

show_status() {
    echo -e "${BOLD}${BLUE}Claude Code Personalities Status${NC}"
    echo ""
    
    # Check version
    if [[ -f "$VERSION_FILE" ]]; then
        local version=$(cat "$VERSION_FILE")
        print_success "Version: v$version"
    else
        print_error "Not installed"
        echo ""
        echo "Install with:"
        echo "  claude-code-personalities install"
        exit 1
    fi
    
    # Check statusline
    if [[ -f "$CLAUDE_DIR/claude-code-personalities-statusline.sh" ]]; then
        print_success "Statusline installed"
    else
        print_error "Statusline not found"
    fi
    
    # Check hooks
    if [[ -d "$HOOKS_DIR" ]] && ls "$HOOKS_DIR"/personalities_*.sh &>/dev/null 2>&1; then
        print_success "Hooks installed:"
        for hook in "$HOOKS_DIR"/personalities_*.sh; do
            echo "    ${ICON_BULLET} $(basename "$hook")"
        done
    else
        print_error "Hooks not found"
    fi
    
    # Check settings
    if [[ -f "$CLAUDE_DIR/settings.json" ]]; then
        if grep -q "claude-code-personalities-statusline.sh" "$CLAUDE_DIR/settings.json" 2>/dev/null; then
            print_success "Settings configured"
        else
            print_warning "Settings found but personalities not configured"
        fi
    else
        print_error "Settings.json not found"
    fi
    
    # Test statusline
    echo ""
    print_info "Testing statusline..."
    if [[ -f "$CLAUDE_DIR/claude-code-personalities-statusline.sh" ]]; then
        echo -n "  Output: "
        echo '{"model":{"display_name":"Opus"},"workspace":{"current_dir":"/test"}}' | "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
        echo ""
    fi
}

# Main command handler
case "${1:-help}" in
    install)
        shift  # Remove 'install' from arguments
        do_install "$@"
        ;;
    update|upgrade)
        do_update
        ;;
    uninstall|remove)
        do_uninstall
        ;;
    status)
        show_status
        ;;
    check-update|check)
        check_for_updates
        ;;
    version|-v|--version)
        show_version
        ;;
    help|-h|--help)
        show_help
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac