#!/bin/bash

# Claude Code Personalities Manager
# Self-contained command for managing Claude Code Personalities

set -e

VERSION="0.0.3"
GITHUB_REPO="Mehdi-Hp/claude-code-personalities"
CLAUDE_DIR="$HOME/.claude"
HOOKS_DIR="$CLAUDE_DIR/hooks"
VERSION_FILE="$CLAUDE_DIR/.personalities_version"
INSTALL_DIR="$CLAUDE_DIR/personalities"
BIN_PATH="$HOME/.local/bin/claude-code-personalities"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

# Helper functions
print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_info() {
    echo -e "${CYAN}ℹ${NC} $1"
}

confirm_action() {
    local message="$1"
    echo
    echo -e "${CYAN}$message${NC}"
    echo -ne "${GREEN}Continue? (Y/n): ${NC}"
    
    # Read from /dev/tty (terminal) to work when script is piped through bash
    # Fall back to stdin if /dev/tty is not available
    if [ -r /dev/tty ]; then
        read -n 1 -r response < /dev/tty
    else
        read -n 1 -r response
    fi
    echo # Add newline after single char input
    
    # Default to yes on Enter (empty response) or explicit yes
    if [[ -z "$response" ]] || [[ "$response" =~ ^[Yy]$ ]]; then
        return 0
    else
        echo -e "${YELLOW}Operation cancelled${NC}"
        return 1
    fi
}

show_version() {
    if [[ -f "$VERSION_FILE" ]]; then
        local installed_version=$(cat "$VERSION_FILE")
        echo "Claude Code Personalities v$installed_version"
    else
        echo "Claude Code Personalities v$VERSION (not installed)"
    fi
}

show_help() {
    show_version
    echo ""
    echo "Usage: claude-code-personalities [COMMAND] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  install [--yes|-y] [--interactive|-i]"
    echo "                      Install Claude Code Personalities"
    echo "  update              Update to the latest version"
    echo "  uninstall           Remove Claude Code Personalities" 
    echo "  status              Check installation status"
    echo "  check-update        Check for available updates"
    echo "  version             Show version information"
    echo "  help                Show this help message"
    echo ""
    echo "Installation Options:"
    echo "  --yes, -y           Non-interactive installation with safe defaults"
    echo "  --interactive, -i   Interactive installation (default)"
    echo ""
    echo "Environment Variables:"
    echo "  NONINTERACTIVE=1    Enable non-interactive mode"
    echo ""
    echo "Two-Stage Installation:"
    echo "  1. Install CLI tool:"
    echo "     curl -fsSL https://raw.githubusercontent.com/$GITHUB_REPO/main/install.sh | bash"
    echo "  2. Configure Claude Code:"
    echo "     claude-code-personalities install"
    echo ""
    echo "Quick Commands:"
    echo "  claude-code-personalities install --yes    # Non-interactive install"
    echo "  claude-code-personalities update           # Update to latest"
    echo "  claude-code-personalities status           # Check status"
}

check_dependencies() {
    local missing=()
    
    if ! command -v jq &> /dev/null; then
        missing+=("jq")
    fi
    
    if ! command -v curl &> /dev/null; then
        missing+=("curl")
    fi
    
    if ! command -v git &> /dev/null; then
        missing+=("git")
    fi
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        print_error "Missing required dependencies: ${missing[*]}"
        echo ""
        echo "Install with:"
        for dep in "${missing[@]}"; do
            echo "  brew install $dep"
        done
        exit 1
    fi
}

backup_file() {
    local file="$1"
    if [[ -f "$file" ]]; then
        local timestamp=$(date +%Y%m%d_%H%M%S)
        cp "$file" "${file}.backup.${timestamp}"
        print_info "Backed up $(basename "$file")"
    fi
}

download_latest() {
    local temp_dir=$(mktemp -d)
    print_info "Downloading latest version from GitHub..." >&2
    
    # Get latest release info
    local release_info=$(curl -sL "https://api.github.com/repos/$GITHUB_REPO/releases/latest")
    local latest_version=$(echo "$release_info" | jq -r '.tag_name' | sed 's/^v//')
    local tarball_url=$(echo "$release_info" | jq -r '.tarball_url')
    
    if [[ -z "$latest_version" ]] || [[ "$latest_version" == "null" ]]; then
        print_error "Failed to get latest version from GitHub" >&2
        rm -rf "$temp_dir"
        exit 1
    fi
    
    print_info "Latest version: v$latest_version" >&2
    
    # Download and extract
    curl -sL "$tarball_url" | tar xz -C "$temp_dir" --strip-components=1
    
    echo "$temp_dir"
    echo "$latest_version"
}

install_files() {
    local source_dir="$1"
    local version="$2"
    
    print_info "Installing Claude Code Personalities v$version..."
    
    # Create directories
    mkdir -p "$CLAUDE_DIR"
    mkdir -p "$HOOKS_DIR"
    mkdir -p "$INSTALL_DIR"
    
    # Backup existing files
    [[ -f "$CLAUDE_DIR/claude-code-personalities-statusline.sh" ]] && backup_file "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
    [[ -f "$CLAUDE_DIR/settings.json" ]] && backup_file "$CLAUDE_DIR/settings.json"
    
    # Copy statusline
    cp "$source_dir/scripts/claude-code-personalities-statusline.sh" "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
    chmod +x "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
    print_success "Installed claude-code-personalities-statusline.sh"
    
    # Copy hooks
    for hook in "$source_dir/hooks"/*.sh; do
        cp "$hook" "$HOOKS_DIR/"
        chmod +x "$HOOKS_DIR/$(basename "$hook")"
    done
    print_success "Installed hooks"
    
    # Store installation files for future updates
    cp -r "$source_dir/scripts" "$INSTALL_DIR/"
    cp -r "$source_dir/hooks" "$INSTALL_DIR/"
    
    # Write version file
    echo "$version" > "$VERSION_FILE"
    
    # Update or create settings.json
    update_settings
    
    print_success "Installation complete!"
}

update_settings() {
    local settings_file="$CLAUDE_DIR/settings.json"
    local temp_file=$(mktemp)
    
    if [[ ! -f "$settings_file" ]]; then
        # Create new settings file
        cat > "$settings_file" << 'EOF'
{
  "statusLine": {
    "type": "command",
    "command": "~/.claude/claude-code-personalities-statusline.sh",
    "padding": 0
  },
  "hooks": {
    "PreToolUse": [{
      "matcher": "*",
      "hooks": [{
        "type": "command",
        "command": "~/.claude/hooks/personalities_track_activity.sh"
      }]
    }],
    "PostToolUse": [{
      "matcher": "*",
      "hooks": [{
        "type": "command",
        "command": "~/.claude/hooks/personalities_track_activity.sh"
      }]
    }],
    "UserPromptSubmit": [{
      "hooks": [{
        "type": "command",
        "command": "~/.claude/hooks/personalities_reset_errors.sh"
      }]
    }],
    "Stop": [{
      "matcher": "",
      "hooks": [{
        "type": "command",
        "command": "~/.claude/hooks/personalities_session_end.sh"
      }]
    }]
  }
}
EOF
        print_success "Created settings.json"
    else
        # Update existing settings using jq
        if command -v jq &> /dev/null; then
            jq '.statusLine = {
                "type": "command",
                "command": "~/.claude/claude-code-personalities-statusline.sh",
                "padding": 0
            }' "$settings_file" > "$temp_file" && mv "$temp_file" "$settings_file"
            print_success "Updated settings.json"
        else
            print_warning "Could not update settings.json (jq not found)"
        fi
    fi
}

do_install() {
    local interactive=true
    
    # Parse arguments for flags
    while [[ $# -gt 0 ]]; do
        case $1 in
            --yes|-y)
                interactive=false
                shift
                ;;
            --interactive|-i)
                interactive=true
                shift
                ;;
            *)
                print_error "Unknown flag: $1"
                echo "Usage: claude-code-personalities install [--yes|-y] [--interactive|-i]"
                exit 1
                ;;
        esac
    done
    
    # Check environment variable
    if [[ "$NONINTERACTIVE" == "1" ]]; then
        interactive=false
    fi
    
    # Check if we have a TTY for interactive mode
    if [[ "$interactive" == "true" ]] && ! [ -t 0 ]; then
        echo -e "${YELLOW}⚠ No terminal detected for interactive mode${NC}"
        echo ""
        echo "For interactive installation, run from a terminal:"
        echo -e "  ${CYAN}claude-code-personalities install${NC}"
        echo ""
        echo "For non-interactive installation with safe defaults:"
        echo -e "  ${CYAN}claude-code-personalities install --yes${NC}"
        echo ""
        echo "Or set environment variable:"
        echo -e "  ${CYAN}NONINTERACTIVE=1 claude-code-personalities install${NC}"
        exit 1
    fi
    
    if [[ "$interactive" == "true" ]]; then
        run_interactive_install
    else
        run_noninteractive_install
    fi
}

run_interactive_install() {
    echo -e "${BOLD}${BLUE}Claude Code Personalities Setup${NC}"
    echo
    echo "This will install personalities for Claude Code with the following changes:"
    echo -e "  ${CYAN}•${NC} Install statusline script to ~/.claude/claude-code-personalities-statusline.sh"
    echo -e "  ${CYAN}•${NC} Install personality hooks to ~/.claude/hooks/"
    echo -e "  ${CYAN}•${NC} Configure Claude Code settings.json"
    echo -e "  ${CYAN}•${NC} Create backups of existing files"
    
    if ! confirm_action "Do you want to continue with the installation?"; then
        exit 0
    fi
    
    check_dependencies
    
    # Download latest version
    local result=$(download_latest)
    local temp_dir=$(echo "$result" | head -1)
    local version=$(echo "$result" | tail -1)
    
    # Check what files exist that could be backed up
    echo -e "${BOLD}Checking existing files...${NC}"
    local files_to_backup=0
    [[ -f "$CLAUDE_DIR/claude-code-personalities-statusline.sh" ]] && ((files_to_backup++))
    [[ -f "$CLAUDE_DIR/settings.json" ]] && ((files_to_backup++))
    [[ -d "$HOOKS_DIR" ]] && [[ "$(ls -A $HOOKS_DIR 2>/dev/null)" ]] && ((files_to_backup++))
    
    if [[ $files_to_backup -gt 0 ]]; then
        echo -e "${YELLOW}Found existing Claude Code configuration:${NC}"
        [[ -f "$CLAUDE_DIR/claude-code-personalities-statusline.sh" ]] && echo -e "  ${CYAN}•${NC} claude-code-personalities-statusline.sh"
        [[ -f "$CLAUDE_DIR/settings.json" ]] && echo -e "  ${CYAN}•${NC} settings.json" 
        [[ -d "$HOOKS_DIR" ]] && [[ "$(ls -A $HOOKS_DIR 2>/dev/null)" ]] && echo -e "  ${CYAN}•${NC} hooks/"
        
        if ! confirm_action "Create backups before proceeding?"; then
            rm -rf "$temp_dir"
            exit 0
        fi
        
        # Create directories and backup files
        print_info "Creating directories..."
        mkdir -p "$CLAUDE_DIR" "$HOOKS_DIR" "$INSTALL_DIR"
        
        print_info "Creating backups..."
        [[ -f "$CLAUDE_DIR/claude-code-personalities-statusline.sh" ]] && backup_file "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
        [[ -f "$CLAUDE_DIR/settings.json" ]] && backup_file "$CLAUDE_DIR/settings.json"
    else
        print_info "No existing files found"
        print_info "Creating directories..."
        mkdir -p "$CLAUDE_DIR" "$HOOKS_DIR" "$INSTALL_DIR"
    fi
    
    # Install statusline
    if ! confirm_action "Install personality statusline script?"; then
        rm -rf "$temp_dir"
        exit 0
    fi
    
    print_info "Installing statusline..."
    cp "$temp_dir/scripts/claude-code-personalities-statusline.sh" "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
    chmod +x "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
    print_success "Statusline installed"
    
    # Install hooks
    if ! confirm_action "Install personality hooks?"; then
        rm -rf "$temp_dir"
        exit 0
    fi
    
    print_info "Installing hooks..."
    for hook in "$temp_dir/hooks"/*.sh; do
        cp "$hook" "$HOOKS_DIR/"
        chmod +x "$HOOKS_DIR/$(basename "$hook")"
    done
    print_success "Hooks installed"
    
    # Store installation files for future updates
    cp -r "$temp_dir/scripts" "$INSTALL_DIR/"
    cp -r "$temp_dir/hooks" "$INSTALL_DIR/"
    
    # Write version file
    echo "$version" > "$VERSION_FILE"
    
    # Configure settings.json
    if [[ -f "$CLAUDE_DIR/settings.json" ]]; then
        echo -e "${YELLOW}Existing settings.json found${NC}"
        echo "The personality configuration needs to be added to your settings."
        echo "This will replace your current settings.json file."
        echo "(Your original settings have been backed up)"
        
        if ! confirm_action "Update Claude Code settings.json?"; then
            print_warning "Skipping settings.json configuration"
            print_info "You'll need to manually add the personality hooks to your settings.json"
            rm -rf "$temp_dir"
            return
        fi
    else
        if ! confirm_action "Create Claude Code settings.json with personality configuration?"; then
            rm -rf "$temp_dir"
            exit 0
        fi
    fi
    
    print_info "Configuring Claude Code settings..."
    update_settings
    print_success "Settings configured"
    
    # Cleanup
    rm -rf "$temp_dir"
    
    echo
    print_success "Claude Code Personalities v$version installed successfully!"
    echo
    echo -e "${BOLD}Next Steps:${NC}"
    echo "  1. Restart Claude Code to activate personalities"
    echo "  2. Start coding and watch your personalities change!"
}

run_noninteractive_install() {
    echo -e "${BOLD}${BLUE}Claude Code Personalities Setup (Non-Interactive)${NC}"
    echo
    echo "Installing with safe defaults..."
    echo -e "  ${CYAN}•${NC} Will create backups of existing files"
    echo -e "  ${CYAN}•${NC} Will install statusline script and hooks"
    echo -e "  ${CYAN}•${NC} Will configure Claude Code settings.json"
    echo
    
    check_dependencies
    
    # Download latest version
    local result=$(download_latest)
    local temp_dir=$(echo "$result" | head -1)
    local version=$(echo "$result" | tail -1)
    
    # Create directories
    print_info "Creating directories..."
    mkdir -p "$CLAUDE_DIR" "$HOOKS_DIR" "$INSTALL_DIR"
    
    # Always create backups in non-interactive mode
    print_info "Creating backups of existing files..."
    [[ -f "$CLAUDE_DIR/claude-code-personalities-statusline.sh" ]] && backup_file "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
    [[ -f "$CLAUDE_DIR/settings.json" ]] && backup_file "$CLAUDE_DIR/settings.json"
    
    # Install statusline
    print_info "Installing statusline..."
    cp "$temp_dir/scripts/claude-code-personalities-statusline.sh" "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
    chmod +x "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
    print_success "Statusline installed"
    
    # Install hooks
    print_info "Installing hooks..."
    for hook in "$temp_dir/hooks"/*.sh; do
        cp "$hook" "$HOOKS_DIR/"
        chmod +x "$HOOKS_DIR/$(basename "$hook")"
    done
    print_success "Hooks installed"
    
    # Store installation files for future updates
    cp -r "$temp_dir/scripts" "$INSTALL_DIR/"
    cp -r "$temp_dir/hooks" "$INSTALL_DIR/"
    
    # Write version file
    echo "$version" > "$VERSION_FILE"
    
    # Configure settings.json (always update in non-interactive mode)
    print_info "Configuring Claude Code settings..."
    update_settings
    print_success "Settings configured"
    
    # Cleanup
    rm -rf "$temp_dir"
    
    echo
    print_success "Claude Code Personalities v$version installed successfully!"
    echo
    echo -e "${BOLD}Next Steps:${NC}"
    echo "  1. Restart Claude Code to activate personalities"
    echo "  2. Start coding and watch your personalities change!"
    echo
    print_info "Backups were created for any existing files"
}

do_update() {
    echo -e "${BOLD}${BLUE}Updating Claude Code Personalities${NC}"
    echo ""
    
    check_dependencies
    
    # Check current version
    if [[ ! -f "$VERSION_FILE" ]]; then
        print_warning "Claude Code Personalities not installed. Running install instead..."
        do_install
        return
    fi
    
    local current_version=$(cat "$VERSION_FILE")
    print_info "Current version: v$current_version"
    
    # Download latest version
    local result=$(download_latest)
    local temp_dir=$(echo "$result" | head -1)
    local latest_version=$(echo "$result" | tail -1)
    
    # Compare versions
    if [[ "$current_version" == "$latest_version" ]]; then
        print_success "Already running the latest version!"
        rm -rf "$temp_dir"
        return
    fi
    
    # Show changelog
    print_info "Updating from v$current_version to v$latest_version"
    echo ""
    
    # Install new version
    install_files "$temp_dir" "$latest_version"
    
    # Update this command itself
    if [[ -f "$temp_dir/bin/claude-code-personalities" ]]; then
        print_info "Updating command..."
        # Ensure directory exists
        mkdir -p "$(dirname "$BIN_PATH")"
        cp "$temp_dir/bin/claude-code-personalities" "$BIN_PATH"
        chmod +x "$BIN_PATH"
        print_success "Command updated"
    fi
    
    # Cleanup
    rm -rf "$temp_dir"
    
    echo ""
    print_success "Updated to v$latest_version successfully!"
    print_info "Restart Claude Code to see the changes"
}

do_uninstall() {
    echo -e "${BOLD}${BLUE}Uninstalling Claude Code Personalities${NC}"
    echo ""
    
    # Remove statusline
    if [[ -f "$CLAUDE_DIR/claude-code-personalities-statusline.sh" ]]; then
        rm "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
        print_success "Removed claude-code-personalities-statusline.sh"
    fi
    
    # Remove hooks
    if [[ -d "$HOOKS_DIR" ]]; then
        rm -f "$HOOKS_DIR"/personalities_*.sh
        print_success "Removed hooks"
    fi
    
    # Remove version file
    [[ -f "$VERSION_FILE" ]] && rm "$VERSION_FILE"
    
    # Remove installation directory
    [[ -d "$INSTALL_DIR" ]] && rm -rf "$INSTALL_DIR"
    
    # Clean up settings.json
    if [[ -f "$CLAUDE_DIR/settings.json" ]] && command -v jq &> /dev/null; then
        print_info "Cleaning settings.json..."
        local temp_file=$(mktemp)
        jq 'del(.statusLine) | del(.hooks)' "$CLAUDE_DIR/settings.json" > "$temp_file"
        mv "$temp_file" "$CLAUDE_DIR/settings.json"
    fi
    
    print_success "Claude Code Personalities uninstalled"
    echo -e "  ${CYAN}$(printf '\\xef\\x80\\xa2')${NC} Restart Claude Code to complete removal"
}

check_for_updates() {
    echo -e "${BOLD}${BLUE}Checking for Updates${NC}"
    echo ""
    
    if [[ ! -f "$VERSION_FILE" ]]; then
        print_warning "Claude Code Personalities not installed"
        echo "Install with: claude-code-personalities install"
        exit 1
    fi
    
    local current_version=$(cat "$VERSION_FILE")
    print_info "Current version: v$current_version"
    
    # Get latest version from GitHub
    print_info "Checking GitHub for updates..."
    local release_info=$(curl -sL "https://api.github.com/repos/$GITHUB_REPO/releases/latest")
    local latest_version=$(echo "$release_info" | jq -r '.tag_name' | sed 's/^v//')
    
    if [[ -z "$latest_version" ]] || [[ "$latest_version" == "null" ]]; then
        print_error "Failed to check for updates"
        exit 1
    fi
    
    print_info "Latest version: v$latest_version"
    echo ""
    
    if [[ "$current_version" == "$latest_version" ]]; then
        print_success "You are running the latest version!"
    else
        print_warning "Update available!"
        echo ""
        echo "Update with:"
        echo "  claude-code-personalities update"
        echo ""
        echo "View release notes:"
        echo "  https://github.com/$GITHUB_REPO/releases/tag/v$latest_version"
    fi
}

show_status() {
    echo -e "${BOLD}${BLUE}Claude Code Personalities Status${NC}"
    echo ""
    
    # Check version
    if [[ -f "$VERSION_FILE" ]]; then
        local version=$(cat "$VERSION_FILE")
        print_success "Version: v$version"
    else
        print_error "Not installed"
        echo ""
        echo "Install with:"
        echo "  claude-code-personalities install"
        exit 1
    fi
    
    # Check statusline
    if [[ -f "$CLAUDE_DIR/claude-code-personalities-statusline.sh" ]]; then
        print_success "Statusline installed"
    else
        print_error "Statusline not found"
    fi
    
    # Check hooks
    if [[ -d "$HOOKS_DIR" ]] && ls "$HOOKS_DIR"/personalities_*.sh &>/dev/null 2>&1; then
        print_success "Hooks installed:"
        for hook in "$HOOKS_DIR"/personalities_*.sh; do
            echo "    • $(basename "$hook")"
        done
    else
        print_error "Hooks not found"
    fi
    
    # Check settings
    if [[ -f "$CLAUDE_DIR/settings.json" ]]; then
        if grep -q "claude-code-personalities-statusline.sh" "$CLAUDE_DIR/settings.json" 2>/dev/null; then
            print_success "Settings configured"
        else
            print_warning "Settings found but personalities not configured"
        fi
    else
        print_error "Settings.json not found"
    fi
    
    # Test statusline
    echo ""
    print_info "Testing statusline..."
    if [[ -f "$CLAUDE_DIR/claude-code-personalities-statusline.sh" ]]; then
        echo -n "  Output: "
        echo '{"model":{"display_name":"Opus"},"workspace":{"current_dir":"/test"}}' | "$CLAUDE_DIR/claude-code-personalities-statusline.sh"
        echo ""
    fi
}

# Main command handler
case "${1:-help}" in
    install)
        # Parse install flags
        shift  # Remove 'install' from arguments
        do_install "$@"
        ;;
    update|upgrade)
        do_update
        ;;
    uninstall|remove)
        do_uninstall
        ;;
    status)
        show_status
        ;;
    check-update|check)
        check_for_updates
        ;;
    version|-v|--version)
        show_version
        ;;
    help|-h|--help)
        show_help
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac