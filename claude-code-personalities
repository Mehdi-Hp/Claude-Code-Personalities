#!/bin/bash

# Claude Code Personalities Setup Utility
# Used by Homebrew installation to configure Claude Code

set -e

VERSION="1.0.2"
CLAUDE_DIR="$HOME/.claude"
HOOKS_DIR="$CLAUDE_DIR/hooks"
BREW_SHARE="$(brew --prefix)/share/claude-code-personalities"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

# Helper functions
print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_info() {
    echo -e "${CYAN}ℹ${NC} $1"
}

confirm_action() {
    local message="$1"
    echo
    echo -e "${CYAN}$message${NC}"
    echo -ne "${GREEN}Continue? (y/N): ${NC}"
    read -n 1 -r response
    echo # Add newline after single char input
    
    if [[ "$response" =~ ^[Yy]$ ]]; then
        return 0
    else
        echo -e "${YELLOW}Operation cancelled${NC}"
        return 1
    fi
}

show_help() {
    echo "Claude Code Personalities v$VERSION"
    echo ""
    echo "Usage: claude-code-personalities [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --install       Configure Claude Code with personalities"
    echo "  --uninstall     Remove personalities configuration"
    echo "  --status        Check installation status"
    echo "  --check-update  Check for available updates"
    echo "  --no-backup     Skip creating backup files (use if backups fail)"
    echo "  --help          Show this help message"
    echo ""
    echo "Installation:"
    echo "  brew install claude-code-personalities"
    echo "  claude-code-personalities --install"
    echo ""
    echo "Uninstallation:"
    echo "  claude-code-personalities --uninstall"
    echo "  brew uninstall claude-code-personalities"
}

check_dependencies() {
    if ! command -v jq &> /dev/null; then
        print_error "jq is not installed. Install with: brew install jq"
        exit 1
    fi
    
    if [[ ! -d "$BREW_SHARE" ]]; then
        print_error "Claude Code Personalities not found in Homebrew."
        print_info "Install with: brew install claude-code-personalities"
        exit 1
    fi
}

backup_existing() {
    local file="$1"
    local timestamp=$(date +%Y%m%d_%H%M%S)
    
    # Skip backups if --no-backup flag is set
    if [[ "$NO_BACKUP" == "true" ]]; then
        return 0
    fi
    
    if [[ -f "$file" ]]; then
        # Try to create backup, but don't fail if it doesn't work
        if cp "$file" "${file}.backup.${timestamp}" 2>/dev/null; then
            print_info "Backed up $(basename "$file") to $(basename "${file}.backup.${timestamp}")"
        else
            print_warning "Could not create backup of $(basename "$file") (permission denied)"
            print_info "Original file will be overwritten"
        fi
    fi
}

install_personalities() {
    echo -e "${BOLD}${BLUE}Claude Code Personalities Setup${NC}"
    echo
    echo "This will install personalities for Claude Code with the following changes:"
    echo -e "  ${CYAN}•${NC} Install statusline script to ~/.claude/statusline.sh"
    echo -e "  ${CYAN}•${NC} Install personality hooks to ~/.claude/hooks/"
    echo -e "  ${CYAN}•${NC} Configure Claude Code settings.json"
    echo -e "  ${CYAN}•${NC} Create backups of existing files"
    
    if ! confirm_action "Do you want to continue with the installation?"; then
        exit 0
    fi
    
    # Check dependencies
    check_dependencies
    
    # Check what files exist that could be backed up
    echo -e "${BOLD}Checking existing files...${NC}"
    files_to_backup=0
    [[ -f "$CLAUDE_DIR/statusline.sh" ]] && ((files_to_backup++))
    [[ -f "$CLAUDE_DIR/settings.json" ]] && ((files_to_backup++))
    [[ -d "$HOOKS_DIR" ]] && [[ "$(ls -A $HOOKS_DIR 2>/dev/null)" ]] && ((files_to_backup++))
    
    if [[ $files_to_backup -gt 0 ]]; then
        echo -e "${YELLOW}Found existing Claude Code configuration:${NC}"
        [[ -f "$CLAUDE_DIR/statusline.sh" ]] && echo -e "  ${CYAN}•${NC} statusline.sh"
        [[ -f "$CLAUDE_DIR/settings.json" ]] && echo -e "  ${CYAN}•${NC} settings.json" 
        [[ -d "$HOOKS_DIR" ]] && [[ "$(ls -A $HOOKS_DIR 2>/dev/null)" ]] && echo -e "  ${CYAN}•${NC} hooks/"
        
        if ! confirm_action "Create backups before proceeding?"; then
            exit 0
        fi
        
        # Create directories and backup files
        print_info "Creating directories..."
        mkdir -p "$HOOKS_DIR"
        
        print_info "Creating backups..."
        backup_existing "$CLAUDE_DIR/statusline.sh"
        backup_existing "$CLAUDE_DIR/settings.json"
    else
        print_info "No existing files found"
        print_info "Creating directories..."
        mkdir -p "$HOOKS_DIR"
    fi
    
    # Install statusline
    if ! confirm_action "Install personality statusline script?"; then
        exit 0
    fi
    
    print_info "Installing statusline..."
    cp "$BREW_SHARE/statusline.sh" "$CLAUDE_DIR/statusline.sh"
    chmod +x "$CLAUDE_DIR/statusline.sh"
    print_success "Statusline installed"
    
    # Install hooks
    if ! confirm_action "Install personality hooks?"; then
        exit 0
    fi
    
    print_info "Installing hooks..."
    for hook in "$BREW_SHARE/hooks"/*.sh; do
        cp "$hook" "$HOOKS_DIR/"
        chmod +x "$HOOKS_DIR/$(basename "$hook")"
    done
    print_success "Hooks installed"
    
    # Configure settings.json
    if [[ -f "$CLAUDE_DIR/settings.json" ]]; then
        echo -e "${YELLOW}Existing settings.json found${NC}"
        echo "The personality configuration needs to be added to your settings."
        echo "This will replace your current settings.json file."
        echo "(Your original settings have been backed up)"
        
        if ! confirm_action "Update Claude Code settings.json?"; then
            print_warning "Skipping settings.json configuration"
            print_info "You'll need to manually add the personality hooks to your settings.json"
            return
        fi
    else
        if ! confirm_action "Create Claude Code settings.json with personality configuration?"; then
            exit 0
        fi
    fi
    
    print_info "Configuring Claude Code settings..."
    
    # Create or update settings.json
    cat > "$CLAUDE_DIR/settings.json" << 'EOF'
{
  "statusLine": {
    "type": "command",
    "command": "~/.claude/statusline.sh",
    "padding": 0
  },
  "hooks": {
    "PreToolUse": [{
      "matcher": "*",
      "hooks": [{
        "type": "command",
        "command": "~/.claude/hooks/personalities_track_activity.sh"
      }]
    }],
    "PostToolUse": [{
      "matcher": "*",
      "hooks": [{
        "type": "command",
        "command": "~/.claude/hooks/personalities_track_activity.sh"
      }]
    }],
    "UserPromptSubmit": [{
      "hooks": [{
        "type": "command",
        "command": "~/.claude/hooks/personalities_reset_errors.sh"
      }]
    }],
    "Stop": [{
      "matcher": "",
      "hooks": [{
        "type": "command",
        "command": "~/.claude/hooks/personalities_session_end.sh"
      }]
    }]
  }
}
EOF
    
    echo
    print_success "Claude Code Personalities installed successfully!"
    echo
    echo -e "${BOLD}Next Steps:${NC}"
    echo "  1. Restart Claude Code to activate personalities"
    echo "  2. Start coding and watch your personalities change!"
}

uninstall_personalities() {
    echo -e "${BOLD}${BLUE}Uninstalling Claude Code Personalities...${NC}"
    echo
    
    # Try to restore from backups first
    print_info "Looking for backup files..."
    
    # Restore statusline.sh from backup
    if ls "$CLAUDE_DIR"/statusline.sh.backup.* 1> /dev/null 2>&1; then
        LATEST_BACKUP=$(ls -t "$CLAUDE_DIR"/statusline.sh.backup.* 2>/dev/null | head -1)
        if [ -f "$LATEST_BACKUP" ]; then
            if mv "$LATEST_BACKUP" "$CLAUDE_DIR/statusline.sh" 2>/dev/null; then
                print_success "Restored original statusline.sh"
            else
                print_warning "Could not restore statusline.sh (permission denied)"
                rm -f "$CLAUDE_DIR/statusline.sh" 2>/dev/null
            fi
        fi
    else
        rm -f "$CLAUDE_DIR/statusline.sh" 2>/dev/null
    fi
    
    # Restore settings.json from backup
    if ls "$CLAUDE_DIR"/settings.json.backup.* 1> /dev/null 2>&1; then
        LATEST_BACKUP=$(ls -t "$CLAUDE_DIR"/settings.json.backup.* 2>/dev/null | head -1)
        if [ -f "$LATEST_BACKUP" ]; then
            if mv "$LATEST_BACKUP" "$CLAUDE_DIR/settings.json" 2>/dev/null; then
                print_success "Restored original settings.json"
            else
                print_warning "Could not restore settings.json (permission denied)"
                print_info "You'll need to manually remove personality hooks from settings.json"
            fi
        fi
    else
        print_warning "No settings.json backup found"
        print_info "You'll need to manually remove personality hooks from settings.json"
    fi
    
    # Remove personality hooks
    print_info "Removing personality hooks..."
    rm -f "$HOOKS_DIR"/personalities_*.sh 2>/dev/null
    
    # Clean up any remaining backup files
    if ls "$CLAUDE_DIR"/*.backup.* &> /dev/null 2>&1; then
        print_info "Cleaning up backup files..."
        rm -f "$CLAUDE_DIR"/*.backup.* 2>/dev/null
    fi
    
    echo
    print_success "Claude Code Personalities uninstalled"
    print_info "Restart Claude Code to complete the removal"
}

check_for_updates() {
    echo -e "${BOLD}${BLUE}Checking for Updates...${NC}"
    echo
    
    print_info "Current version: v$VERSION"
    
    # Try to fetch latest version from GitHub
    print_info "Fetching latest release information..."
    
    if ! command -v curl &> /dev/null; then
        print_error "curl is not installed"
        exit 1
    fi
    
    if ! command -v jq &> /dev/null; then
        print_error "jq is not installed. Install with: brew install jq"
        exit 1
    fi
    
    # Fetch latest release
    LATEST_RELEASE=$(curl -sL https://api.github.com/repos/Mehdi-Hp/claude-code-personalities/releases/latest 2>/dev/null)
    
    if [[ -z "$LATEST_RELEASE" ]]; then
        print_error "Failed to fetch release information from GitHub"
        exit 1
    fi
    
    LATEST_VERSION=$(echo "$LATEST_RELEASE" | jq -r '.tag_name' 2>/dev/null)
    RELEASE_URL=$(echo "$LATEST_RELEASE" | jq -r '.html_url' 2>/dev/null)
    
    if [[ -z "$LATEST_VERSION" ]] || [[ "$LATEST_VERSION" == "null" ]]; then
        print_error "Could not determine latest version"
        exit 1
    fi
    
    print_info "Latest version: $LATEST_VERSION"
    echo
    
    # Compare versions (remove 'v' prefix for comparison)
    CURRENT_CLEAN="${VERSION#v}"
    LATEST_CLEAN="${LATEST_VERSION#v}"
    
    if [[ "$CURRENT_CLEAN" == "$LATEST_CLEAN" ]]; then
        print_success "You are running the latest version!"
    else
        print_warning "Update available: $LATEST_VERSION"
        echo
        echo -e "${BOLD}Update Instructions:${NC}"
        echo
        
        # Check if installed via Homebrew
        if brew list claude-code-personalities &>/dev/null; then
            echo "  Update via Homebrew:"
            echo -e "    ${CYAN}brew update${NC}"
            echo -e "    ${CYAN}brew upgrade claude-code-personalities${NC}"
        else
            echo "  Update via installer:"
            echo -e "    ${CYAN}curl -fsSL https://raw.githubusercontent.com/Mehdi-Hp/claude-code-personalities/main/install.sh | bash${NC}"
        fi
        
        echo
        echo "  View release notes:"
        echo -e "    ${CYAN}$RELEASE_URL${NC}"
    fi
    echo
}

check_status() {
    echo -e "${BOLD}${BLUE}Claude Code Personalities Status${NC}"
    echo
    
    # Check statusline
    if [[ -f "$CLAUDE_DIR/statusline.sh" ]]; then
        print_success "Statusline installed"
    else
        print_error "Statusline not found"
    fi
    
    # Check hooks
    if [[ -d "$HOOKS_DIR" ]] && [[ "$(ls -A "$HOOKS_DIR" 2>/dev/null)" ]]; then
        print_success "Hooks installed:"
        for hook in "$HOOKS_DIR"/*.sh; do
            echo "    • $(basename "$hook")"
        done
    else
        print_error "Hooks not found"
    fi
    
    # Check settings
    if [[ -f "$CLAUDE_DIR/settings.json" ]]; then
        if grep -q "statusline.sh" "$CLAUDE_DIR/settings.json" 2>/dev/null; then
            print_success "Settings configured"
        else
            print_warning "Settings found but personality config missing"
        fi
    else
        print_error "Settings.json not found"
    fi
    
    # Check dependencies
    echo
    if command -v jq &> /dev/null; then
        print_success "jq installed"
    else
        print_error "jq not installed"
    fi
    
    # Test statusline
    echo
    print_info "Testing statusline..."
    if [[ -f "$CLAUDE_DIR/statusline.sh" ]]; then
        echo -n "  Output: "
        echo '{"model":{"display_name":"Test"},"workspace":{"current_dir":"/test"}}' | "$CLAUDE_DIR/statusline.sh"
        echo
    else
        print_error "Cannot test - statusline not installed"
    fi
}

# Parse flags
NO_BACKUP=false
ACTION=""

while [[ $# -gt 0 ]]; do
    case "$1" in
        --install|-i)
            ACTION="install"
            shift
            ;;
        --uninstall|-u)
            ACTION="uninstall"
            shift
            ;;
        --status|-s)
            ACTION="status"
            shift
            ;;
        --check-update)
            ACTION="check-update"
            shift
            ;;
        --no-backup)
            NO_BACKUP=true
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Execute action
case "$ACTION" in
    install)
        install_personalities
        ;;
    uninstall)
        uninstall_personalities
        ;;
    status)
        check_status
        ;;
    check-update)
        check_for_updates
        ;;
    "")
        show_help
        ;;
esac